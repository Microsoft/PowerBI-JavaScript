!function(e){function t(o){if(n[o])return n[o].exports;var r=n[o]={exports:{},id:o,loaded:!1};return e[o].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";var o=n(1);window.Powerbi=o["default"],window.powerbi=new o["default"]},function(e,t,n){"use strict";var o=n(2),r=n(5),i=n(4),s=function(){function e(t){void 0===t&&(t={}),this.embeds=[],window.addEventListener("message",this.onReceiveMessage.bind(this),!1),this.config=i["default"].assign({},e.defaultConfig,t),this.config.autoEmbedOnContentLoaded&&this.enableAutoEmbed()}return e.prototype.init=function(e){var t=this;e=e&&e instanceof HTMLElement?e:document.body;var n=Array.prototype.slice.call(e.querySelectorAll("[powerbi-embed]"));n.forEach(function(e){return t.embed(e)})},e.prototype.embed=function(t,n){var o=this;void 0===n&&(n={});var r,s=t;if(s.powerBiEmbed&&!n.overwrite)return r=s.powerBiEmbed;s.powerBiEmbed&&n.overwrite&&this.remove(s.powerBiEmbed);var a=i["default"].find(function(e){return n.type===e.type||t.getAttribute("powerbi-type")===e.type},e.components);if(!a)throw new Error("Attempted to embed using config "+JSON.stringify(n)+" on element "+t.outerHTML+", but could not determine what type of component to embed. You must specify a type in the configuration or as an attribute such as 'powerbi-type=\"report\"'.");return n.getGlobalAccessToken=function(){return o.accessToken},r=new a(t,n),s.powerBiEmbed=r,this.embeds.push(r),r},e.prototype.enableAutoEmbed=function(){var e=this;window.addEventListener("DOMContentLoaded",function(t){return e.init(document.body)},!1)},e.prototype.remove=function(e){i["default"].remove(function(t){return t===e},this.embeds)},e.prototype.onReceiveMessage=function(t){if(t)try{var n=i["default"].find(function(e){return t.source===e.iframe.contentWindow},this.embeds);if(n){var o="string"==typeof t.data?JSON.parse(t.data):t.data;i["default"].raiseCustomEvent(n.element,e.eventMap[o.event],o)}}catch(r){if("function"!=typeof this.config.onError)throw r;this.config.onError.call(window,r)}},e.components=[r["default"],o["default"]],e.eventMap={tileClicked:"tile-click",tileLoaded:"tile-load",reportPageLoaded:"report-load"},e.defaultConfig={autoEmbedOnContentLoaded:!1,onError:function(){for(var e=[],t=0;t<arguments.length;t++)e[t-0]=arguments[t];return console.log(e[0],e.slice(1))}},e}();Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=s},function(e,t,n){"use strict";var o=this&&this.__extends||function(e,t){function n(){this.constructor=e}for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o]);e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)},r=n(3),i=function(e){function t(t,n){n.loadAction="loadReport",e.call(this,t,n)}return o(t,e),t.prototype.getEmbedUrl=function(){var t=e.prototype.getEmbedUrl.call(this);return this.options.filterPaneEnabled||(t+="&filterPaneEnabled=false"),t},t.type="report",t}(r["default"]);Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i},function(e,t,n){"use strict";var o=n(4),r=function(){function e(t,n){this.element=t,this.options=o["default"].assign({},e.defaultOptions,n);var r=this.getEmbedUrl(),i='<iframe style="width:100%;height:100%;" src="'+r+'" scrolling="no" allowfullscreen="true"></iframe>';this.element.innerHTML=i,this.iframe=this.element.childNodes[0],this.iframe.addEventListener("load",this.load.bind(this),!1)}return e.prototype.load=function(){var e=window.getComputedStyle(this.element),t=this.getAccessToken(),n={message:{action:this.options.loadAction,accessToken:t,width:e.width,height:e.height}};o["default"].raiseCustomEvent(this.element,"embed-init",n),this.iframe.contentWindow.postMessage(JSON.stringify(n.message),"*")},e.prototype.getAccessToken=function(){var e=this.options.accessToken||this.element.getAttribute("powerbi-access-token")||this.options.getGlobalAccessToken();if(!e)throw new Error("No access token was found for element. You must specify an access token directly on the element using attribute 'powerbi-access-token' or specify a global token at: powerbi.accessToken.");return e},e.prototype.getEmbedUrl=function(){var e=this.options.embedUrl||this.element.getAttribute("powerbi-embed");if("string"!=typeof e||0===e.length)throw new Error("Embed Url is required, but it was not found. You must provide an embed url either as part of embed configuration or as attribute 'powerbi-embed'.");return e},e.prototype.fullscreen=function(){var e=this.iframe.requestFullscreen||this.iframe.msRequestFullscreen||this.iframe.mozRequestFullScreen||this.iframe.webkitRequestFullscreen;e.call(this.iframe)},e.prototype.exitFullscreen=function(){if(this.isFullscreen(this.iframe)){var e=document.exitFullscreen||document.mozCancelFullScreen||document.webkitExitFullscreen||document.msExitFullscreen;e.call(document)}},e.prototype.isFullscreen=function(e){var t=["fullscreenElement","webkitFullscreenElement","mozFullscreenScreenElement","msFullscreenElement"];return t.some(function(t){return document[t]===e})},e.defaultOptions={filterPaneEnabled:!0,overwrite:!0},e}();Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},function(e,t){"use strict";var n=function(){function e(){}return e.raiseCustomEvent=function(e,t,n){var o;if("function"==typeof window.CustomEvent?o=new CustomEvent(t,{detail:n,bubbles:!0,cancelable:!0}):(o=document.createEvent("CustomEvent"),o.initCustomEvent(t,!0,!0,n)),e.dispatchEvent(o),!o.defaultPrevented&&o.returnValue){var r="on"+t.replace("-",""),i=e.getAttribute(r);i&&eval.call(e,i)}},e.findIndex=function(e,t){if(!Array.isArray(t))throw new Error("You attempted to call find with second that was not an array. You passed: "+t);var n;return t.some(function(t,o){return e(t)?(n=o,!0):void 0}),n},e.find=function(t,n){var o=e.findIndex(t,n);return n[o]},e.remove=function(t,n){var o=e.findIndex(t,n);n.splice(o,1)},e.assign=function(){for(var e=[],t=0;t<arguments.length;t++)e[t-0]=arguments[t];var n=e[0];if(void 0===n||null===n)throw new TypeError("Cannot convert undefined or null to object");for(var o=Object(n),r=1;r<arguments.length;r++){var i=arguments[r];if(void 0!==i&&null!==i)for(var s in i)i.hasOwnProperty(s)&&(o[s]=i[s])}return o},e}();Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t,n){"use strict";var o=this&&this.__extends||function(e,t){function n(){this.constructor=e}for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o]);e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)},r=n(3),i=function(e){function t(t,n){n.loadAction="loadTile",e.call(this,t,n)}return o(t,e),t.prototype.getEmbedUrl=function(){var t=e.prototype.getEmbedUrl.call(this);return t},t.type="tile",t}(r["default"]);Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvd2VyYmkuanMiXSwibmFtZXMiOlsibW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImluc3RhbGxlZE1vZHVsZXMiLCJleHBvcnRzIiwibW9kdWxlIiwiaWQiLCJsb2FkZWQiLCJjYWxsIiwibSIsImMiLCJwIiwiY29yZV8xIiwid2luZG93IiwiUG93ZXJiaSIsInBvd2VyYmkiLCJyZXBvcnRfMSIsInRpbGVfMSIsInV0aWxfMSIsIlBvd2VyQmkiLCJjb25maWciLCJ0aGlzIiwiZW1iZWRzIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uUmVjZWl2ZU1lc3NhZ2UiLCJiaW5kIiwiYXNzaWduIiwiZGVmYXVsdENvbmZpZyIsImF1dG9FbWJlZE9uQ29udGVudExvYWRlZCIsImVuYWJsZUF1dG9FbWJlZCIsInByb3RvdHlwZSIsImluaXQiLCJjb250YWluZXIiLCJfdGhpcyIsIkhUTUxFbGVtZW50IiwiZG9jdW1lbnQiLCJib2R5IiwiZWxlbWVudHMiLCJBcnJheSIsInNsaWNlIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJlbGVtZW50IiwiZW1iZWQiLCJpbnN0YW5jZSIsInBvd2VyQmlFbGVtZW50IiwicG93ZXJCaUVtYmVkIiwib3ZlcndyaXRlIiwicmVtb3ZlIiwiQ29tcG9uZW50IiwiZmluZCIsImNvbXBvbmVudCIsInR5cGUiLCJnZXRBdHRyaWJ1dGUiLCJjb21wb25lbnRzIiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5Iiwib3V0ZXJIVE1MIiwiZ2V0R2xvYmFsQWNjZXNzVG9rZW4iLCJhY2Nlc3NUb2tlbiIsInB1c2giLCJldmVudCIsIngiLCJzb3VyY2UiLCJpZnJhbWUiLCJjb250ZW50V2luZG93IiwibWVzc2FnZURhdGEiLCJkYXRhIiwicGFyc2UiLCJyYWlzZUN1c3RvbUV2ZW50IiwiZXZlbnRNYXAiLCJlIiwib25FcnJvciIsInRpbGVDbGlja2VkIiwidGlsZUxvYWRlZCIsInJlcG9ydFBhZ2VMb2FkZWQiLCJhcmdzIiwiX2kiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJjb25zb2xlIiwibG9nIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIl9fZXh0ZW5kcyIsImQiLCJiIiwiX18iLCJjb25zdHJ1Y3RvciIsImhhc093blByb3BlcnR5IiwiY3JlYXRlIiwiZW1iZWRfMSIsIlJlcG9ydCIsIl9zdXBlciIsIm9wdGlvbnMiLCJsb2FkQWN0aW9uIiwiZ2V0RW1iZWRVcmwiLCJlbWJlZFVybCIsImZpbHRlclBhbmVFbmFibGVkIiwiRW1iZWQiLCJkZWZhdWx0T3B0aW9ucyIsImlmcmFtZUh0bWwiLCJpbm5lckhUTUwiLCJjaGlsZE5vZGVzIiwibG9hZCIsImNvbXB1dGVkU3R5bGUiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0QWNjZXNzVG9rZW4iLCJpbml0RXZlbnRBcmdzIiwibWVzc2FnZSIsImFjdGlvbiIsIndpZHRoIiwiaGVpZ2h0IiwicG9zdE1lc3NhZ2UiLCJmdWxsc2NyZWVuIiwicmVxdWVzdEZ1bGxTY3JlZW4iLCJyZXF1ZXN0RnVsbHNjcmVlbiIsIm1zUmVxdWVzdEZ1bGxzY3JlZW4iLCJtb3pSZXF1ZXN0RnVsbFNjcmVlbiIsIndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuIiwiZXhpdEZ1bGxzY3JlZW4iLCJpc0Z1bGxzY3JlZW4iLCJtb3pDYW5jZWxGdWxsU2NyZWVuIiwid2Via2l0RXhpdEZ1bGxzY3JlZW4iLCJtc0V4aXRGdWxsc2NyZWVuIiwic29tZSIsIm9wdGlvbiIsIlV0aWxzIiwiZXZlbnROYW1lIiwiZXZlbnREYXRhIiwiY3VzdG9tRXZlbnQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY3JlYXRlRXZlbnQiLCJpbml0Q3VzdG9tRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiaW5saW5lRXZlbnRBdHRyIiwicmVwbGFjZSIsImlubGluZVNjcmlwdCIsImV2YWwiLCJmaW5kSW5kZXgiLCJwcmVkaWNhdGUiLCJ4cyIsImlzQXJyYXkiLCJpbmRleCIsImkiLCJzcGxpY2UiLCJ0YXJnZXQiLCJ1bmRlZmluZWQiLCJUeXBlRXJyb3IiLCJvdXRwdXQiLCJuZXh0S2V5IiwiVGlsZSJdLCJtYXBwaW5ncyI6IkNBQVMsU0FBVUEsR0FLVCxRQUFTQyxHQUFvQkMsR0FHNUIsR0FBR0MsRUFBaUJELEdBQ25CLE1BQU9DLEdBQWlCRCxHQUFVRSxPQUduQyxJQUFJQyxHQUFTRixFQUFpQkQsSUFDN0JFLFdBQ0FFLEdBQUlKLEVBQ0pLLFFBQVEsRUFVVCxPQU5BUCxHQUFRRSxHQUFVTSxLQUFLSCxFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTSCxHQUcvREksRUFBT0UsUUFBUyxFQUdURixFQUFPRCxRQXZCZixHQUFJRCxLQXFDSixPQVRBRixHQUFvQlEsRUFBSVQsRUFHeEJDLEVBQW9CUyxFQUFJUCxFQUd4QkYsRUFBb0JVLEVBQUksR0FHakJWLEVBQW9CLEtBSy9CLFNBQVNJLEVBQVFELEVBQVNILEdBRS9CLFlBQ0EsSUFBSVcsR0FBU1gsRUFBb0IsRUFNakNZLFFBQU9DLFFBQVVGLEVBQUFBLFdBQ2pCQyxPQUFPRSxRQUFVLEdBQUlILEdBQUFBLFlBS2hCLFNBQVNQLEVBQVFELEVBQVNILEdBRS9CLFlBQ0EsSUFBSWUsR0FBV2YsRUFBb0IsR0FDL0JnQixFQUFTaEIsRUFBb0IsR0FDN0JpQixFQUFTakIsRUFBb0IsR0FDN0JrQixFQUFXLFdBQ1gsUUFBU0EsR0FBUUMsR0FDRSxTQUFYQSxJQUFxQkEsTUFDekJDLEtBQUtDLFVBQ0xULE9BQU9VLGlCQUFpQixVQUFXRixLQUFLRyxpQkFBaUJDLEtBQUtKLE9BQU8sR0FFckVBLEtBQUtELE9BQVNGLEVBQUFBLFdBQWVRLFVBQVdQLEVBQVFRLGNBQWVQLEdBQzNEQyxLQUFLRCxPQUFPUSwwQkFDWlAsS0FBS1Esa0JBdUhiLE1BL0dBVixHQUFRVyxVQUFVQyxLQUFPLFNBQVVDLEdBQy9CLEdBQUlDLEdBQVFaLElBQ1pXLEdBQWFBLEdBQWFBLFlB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K0QsRUFBS2hJLFVBQVVvRSxZQUFjLFdBQ3pCLEdBQUlDLEdBQVdKLEVBQU9qRSxVQUFVb0UsWUFBWTFGLEtBQUthLEtBQ2pELE9BQU84RSxJQUVYMkQsRUFBSzFHLEtBQU8sT0FDTDBHLEdBQ1RqRSxFQUFBQSxXQUNGVixRQUFPQyxlQUFlaEYsRUFBUyxjQUFnQmlGLE9BQU8sSUFDdERqRixFQUFBQSxXQUFrQjBKIiwiZmlsZSI6InBvd2VyYmkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fSxcbi8qKioqKiovIFx0XHRcdGlkOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGxvYWRlZDogZmFsc2Vcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xyXG5cdHZhciBjb3JlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xyXG5cdC8qKlxyXG5cdCAqIE1ha2UgUG93ZXJCaSBhdmFpbGFibGUgb24gZ2xvYmFsIG9iamVjdCBmb3IgdXNlIGluIGFwcHMgd2l0aG91dCBtb2R1bGUgbG9hZGluZyBzdXBwb3J0LlxyXG5cdCAqIFNhdmUgY2xhc3MgdG8gYWxsb3cgY3JlYXRpbmcgYW4gaW5zdGFuY2Ugb2YgdGhlIHNlcnZpY2UuXHJcblx0ICogQ3JlYXRlIGluc3RhbmNlIG9mIGNsYXNzIHdpdGggZGVmYXVsdCBjb25maWcgZm9yIG5vcm1hbCB1c2FnZS5cclxuXHQgKi9cclxuXHR3aW5kb3cuUG93ZXJiaSA9IGNvcmVfMS5kZWZhdWx0O1xyXG5cdHdpbmRvdy5wb3dlcmJpID0gbmV3IGNvcmVfMS5kZWZhdWx0KCk7XHJcblxuXG4vKioqLyB9LFxuLyogMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XHJcblx0dmFyIHJlcG9ydF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcclxuXHR2YXIgdGlsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcclxuXHR2YXIgdXRpbF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcclxuXHR2YXIgUG93ZXJCaSA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIFBvd2VyQmkoY29uZmlnKSB7XHJcblx0ICAgICAgICBpZiAoY29uZmlnID09PSB2b2lkIDApIHsgY29uZmlnID0ge307IH1cclxuXHQgICAgICAgIHRoaXMuZW1iZWRzID0gW107XHJcblx0ICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMub25SZWNlaXZlTWVzc2FnZS5iaW5kKHRoaXMpLCBmYWxzZSk7XHJcblx0ICAgICAgICAvLyBUT0RPOiBDaGFuZ2Ugd2hlbiBPYmplY3QuYXNzaWduIGlzIGF2YWlsYWJsZS5cclxuXHQgICAgICAgIHRoaXMuY29uZmlnID0gdXRpbF8xLmRlZmF1bHQuYXNzaWduKHt9LCBQb3dlckJpLmRlZmF1bHRDb25maWcsIGNvbmZpZyk7XHJcblx0ICAgICAgICBpZiAodGhpcy5jb25maWcuYXV0b0VtYmVkT25Db250ZW50TG9hZGVkKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy5lbmFibGVBdXRvRW1iZWQoKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cdCAgICAvKipcclxuXHQgICAgICogSGFuZGxlciBmb3IgRE9NQ29udGVudExvYWRlZCB3aGljaCBzZWFyY2hlcyBET00gZm9yIGVsZW1lbnRzIGhhdmluZyAncG93ZXJiaS1lbWJlZCcgYXR0cmlidXRlXHJcblx0ICAgICAqIGFuZCBhdXRvbWF0aWNhbGx5IGF0dGVtcHRzIHRvIGVtYmVkIGEgcG93ZXJiaSBjb21wb25lbnQgYmFzZWQgb24gaW5mb3JtYXRpb24gZnJvbSB0aGUgYXR0cmlidXRlcy5cclxuXHQgICAgICogT25seSBydW5zIGlmIGBjb25maWcuYXV0b0VtYmVkT25Db250ZW50TG9hZGVkYCBpcyB0cnVlIHdoZW4gdGhlIHNlcnZpY2UgaXMgY3JlYXRlZC5cclxuXHQgICAgICovXHJcblx0ICAgIFBvd2VyQmkucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoY29udGFpbmVyKSB7XHJcblx0ICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cdCAgICAgICAgY29udGFpbmVyID0gKGNvbnRhaW5lciAmJiBjb250YWluZXIgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkgPyBjb250YWluZXIgOiBkb2N1bWVudC5ib2R5O1xyXG5cdCAgICAgICAgdmFyIGVsZW1lbnRzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ1twb3dlcmJpLWVtYmVkXScpKTtcclxuXHQgICAgICAgIGVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIF90aGlzLmVtYmVkKGVsZW1lbnQpOyB9KTtcclxuXHQgICAgfTtcclxuXHQgICAgLyoqXHJcblx0ICAgICAqIEdpdmVuIGFuIGh0bWwgZWxlbWVudCBlbWJlZCBjb21wb25lbnQgYmFzZWQgb24gY29uZmlndXJhdGlvbi5cclxuXHQgICAgICogSWYgY29tcG9uZW50IGhhcyBhbHJlYWR5IGJlZW4gY3JlYXRlZCBhbmQgYXR0YWNoZWQgdG8gZWxlZW1udCBzaW1wbHkgcmV0dXJuIGl0IHRvIHByZXZlbnQgY3JlYXRpbmcgZHVwbGljYXRlIGNvbXBvbmVudHMgZm9yIHNhbWUgZWxlbWVudC5cclxuXHQgICAgICovXHJcblx0ICAgIFBvd2VyQmkucHJvdG90eXBlLmVtYmVkID0gZnVuY3Rpb24gKGVsZW1lbnQsIGNvbmZpZykge1xyXG5cdCAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuXHQgICAgICAgIGlmIChjb25maWcgPT09IHZvaWQgMCkgeyBjb25maWcgPSB7fTsgfVxyXG5cdCAgICAgICAgdmFyIGluc3RhbmNlO1xyXG5cdCAgICAgICAgdmFyIHBvd2VyQmlFbGVtZW50ID0gZWxlbWVudDtcclxuXHQgICAgICAgIGlmIChwb3dlckJpRWxlbWVudC5wb3dlckJpRW1iZWQgJiYgIWNvbmZpZy5vdmVyd3JpdGUpIHtcclxuXHQgICAgICAgICAgICBpbnN0YW5jZSA9IHBvd2VyQmlFbGVtZW50LnBvd2VyQmlFbWJlZDtcclxuXHQgICAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICAvKiogSWYgY29tcG9uZW50IGlzIGFscmVhZHkgcmVnaXN0ZXJlZCBvbiB0aGlzIGVsZW1lbnQsIGJ1dCB3ZSBhcmUgc3VwcG9zZWQgdG8gb3ZlcndyaXRlLCByZW1vdmUgZXhpc3RpbmcgY29tcG9uZW50IGZyb20gcmVnaXN0cnkgKi9cclxuXHQgICAgICAgIGlmIChwb3dlckJpRWxlbWVudC5wb3dlckJpRW1iZWQgJiYgY29uZmlnLm92ZXJ3cml0ZSkge1xyXG5cdCAgICAgICAgICAgIHRoaXMucmVtb3ZlKHBvd2VyQmlFbGVtZW50LnBvd2VyQmlFbWJlZCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB2YXIgQ29tcG9uZW50ID0gdXRpbF8xLmRlZmF1bHQuZmluZChmdW5jdGlvbiAoY29tcG9uZW50KSB7IHJldHVybiBjb25maWcudHlwZSA9PT0gY29tcG9uZW50LnR5cGUgfHwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3Bvd2VyYmktdHlwZScpID09PSBjb21wb25lbnQudHlwZTsgfSwgUG93ZXJCaS5jb21wb25lbnRzKTtcclxuXHQgICAgICAgIGlmICghQ29tcG9uZW50KSB7XHJcblx0ICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXR0ZW1wdGVkIHRvIGVtYmVkIHVzaW5nIGNvbmZpZyBcIiArIEpTT04uc3RyaW5naWZ5KGNvbmZpZykgKyBcIiBvbiBlbGVtZW50IFwiICsgZWxlbWVudC5vdXRlckhUTUwgKyBcIiwgYnV0IGNvdWxkIG5vdCBkZXRlcm1pbmUgd2hhdCB0eXBlIG9mIGNvbXBvbmVudCB0byBlbWJlZC4gWW91IG11c3Qgc3BlY2lmeSBhIHR5cGUgaW4gdGhlIGNvbmZpZ3VyYXRpb24gb3IgYXMgYW4gYXR0cmlidXRlIHN1Y2ggYXMgJ3Bvd2VyYmktdHlwZT1cXFwicmVwb3J0XFxcIicuXCIpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgLy8gVE9ETzogQ29uc2lkZXIgcmVtb3ZpbmcgaW4gZmF2b3Igb2YgcGFzc2luZyByZWZlcmVuY2UgdG8gYHRoaXNgIGluIGNvbnN0cnVjdG9yXHJcblx0ICAgICAgICAvLyBUaGUgZ2V0R2xvYmFsQWNjZXNzVG9rZW4gZnVuY3Rpb24gaXMgb25seSBoZXJlIHNvIHRoYXQgdGhlIGNvbXBvbmVudHMgKFRpbGUgfCBSZXBvcnQpIGNhbiBnZXQgdGhlIGdsb2JhbCBhY2Nlc3MgdG9rZW4gd2l0aG91dCBuZWVkaW5nIHJlZmVyZW5jZVxyXG5cdCAgICAgICAgLy8gdG8gdGhlIHNlcnZpY2UgdGhhdCB0aGV5IGFyZSByZWdpc3RlcmVkIHdpdGhpbiBiZWNhdWVzIGl0IGNyZWF0ZXMgY2lyY3VsYXIgZGVwZW5kZW5jaWVzXHJcblx0ICAgICAgICBjb25maWcuZ2V0R2xvYmFsQWNjZXNzVG9rZW4gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5hY2Nlc3NUb2tlbjsgfTtcclxuXHQgICAgICAgIGluc3RhbmNlID0gbmV3IENvbXBvbmVudChlbGVtZW50LCBjb25maWcpO1xyXG5cdCAgICAgICAgcG93ZXJCaUVsZW1lbnQucG93ZXJCaUVtYmVkID0gaW5zdGFuY2U7XHJcblx0ICAgICAgICB0aGlzLmVtYmVkcy5wdXNoKGluc3RhbmNlKTtcclxuXHQgICAgICAgIHJldHVybiBpbnN0YW5jZTtcclxuXHQgICAgfTtcclxuXHQgICAgLyoqXHJcblx0ICAgICAqIEFkZHMgZXZlbnQgaGFuZGxlciBmb3IgRE9NQ29udGVudExvYWRlZCB3aGljaCBmaW5kcyBhbGwgZWxlbWVudHMgaW4gRE9NIHdpdGggYXR0cmlidXRlIHBvd2VyYmktZW1iZWQtdXJsXHJcblx0ICAgICAqIHRoZW4gYXR0ZW1wdHMgdG8gaW5pdGlhdGUgdGhlIGVtYmVkIHByb2Nlc3MgYmFzZWQgb24gZGF0YSBmcm9tIG90aGVyIHBvd2VyYmktKiBhdHRyaWJ1dGVzLlxyXG5cdCAgICAgKiAoVGhpcyBpcyB1c3VhbGx5IG9ubHkgdXNlZnVsIGZvciBhcHBsaWNhdGlvbnMgcmVuZGVyZWQgb24gYnkgdGhlIHNlcnZlciBzaW5jZSBhbGwgdGhlIGRhdGEgbmVlZGVkIHdpbGwgYmUgYXZhaWxhYmxlIGJ5IHRoZSB0aW1lIHRoZSBoYW5kbGVyIGlzIGNhbGxlZC4pXHJcblx0ICAgICAqL1xyXG5cdCAgICBQb3dlckJpLnByb3RvdHlwZS5lbmFibGVBdXRvRW1iZWQgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cdCAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIF90aGlzLmluaXQoZG9jdW1lbnQuYm9keSk7IH0sIGZhbHNlKTtcclxuXHQgICAgfTtcclxuXHQgICAgLyoqXHJcblx0ICAgICAqIFJlbW92ZSBjb21wb25lbnQgZnJvbSB0aGUgbGlzdCBvZiBlbWJlZGRlZCBjb21wb25lbnRzLlxyXG5cdCAgICAgKi9cclxuXHQgICAgUG93ZXJCaS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKGNvbXBvbmVudCkge1xyXG5cdCAgICAgICAgdXRpbF8xLmRlZmF1bHQucmVtb3ZlKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ID09PSBjb21wb25lbnQ7IH0sIHRoaXMuZW1iZWRzKTtcclxuXHQgICAgfTtcclxuXHQgICAgLyoqXHJcblx0ICAgICAqIEhhbmRsZXIgZm9yIHdpbmRvdyBtZXNzYWdlIGV2ZW50LlxyXG5cdCAgICAgKiBQYXJzZXMgZXZlbnQgZGF0YSBhcyBqc29uIGFuZCBpZiBpdCBjYW1lIGZyb20gYW4gaWZyYW1lIHRoYXQgbWF0Y2hlcyBvbmUgZnJvbSBhbiBleGlzdGluZyBlbWJlZGVkIGNvbXBvbmVudCByZS1kaXNwYXRjaGVzIHRoZSBldmVudCBvbiB0aGUgaWZyYW1lJ3MgcGFyZW50IGVsZW1lbnRcclxuXHQgICAgICogdG8gc2ltdWxhdGUgdGhlIGV2ZW50IGJ1YmJsaW5nIHRocm91Z2ggdGhlIHR3byBzZXBhcmF0ZSB3aW5kb3dzIC8gRE9Ncy5cclxuXHQgICAgICpcclxuXHQgICAgICogSWYgYW4gZXJyb3Igb2NjdXJzIHdoZW4gcGFyc2luZyBldmVudC5kYXRhIGNhbGwgZXJyb3IgaGFuZGxlciBwcm92aWRlZCBkdXJpbmcgY29uZmlndXJhdGlvbi5cclxuXHQgICAgICovXHJcblx0ICAgIFBvd2VyQmkucHJvdG90eXBlLm9uUmVjZWl2ZU1lc3NhZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuXHQgICAgICAgIGlmICghZXZlbnQpIHtcclxuXHQgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB0cnkge1xyXG5cdCAgICAgICAgICAgIC8vIE9ubHkgcmFpc2UgdGhlIGV2ZW50IG9uIHRoZSBlbWJlZCB0aGF0IG1hdGNoZXMgdGhlIHBvc3QgbWVzc2FnZSBvcmlnaW5cclxuXHQgICAgICAgICAgICB2YXIgZW1iZWQgPSB1dGlsXzEuZGVmYXVsdC5maW5kKGZ1bmN0aW9uIChlbWJlZCkgeyByZXR1cm4gZXZlbnQuc291cmNlID09PSBlbWJlZC5pZnJhbWUuY29udGVudFdpbmRvdzsgfSwgdGhpcy5lbWJlZHMpO1xyXG5cdCAgICAgICAgICAgIGlmIChlbWJlZCkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZURhdGEgPSB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gJ3N0cmluZycgPyBKU09OLnBhcnNlKGV2ZW50LmRhdGEpIDogZXZlbnQuZGF0YTtcclxuXHQgICAgICAgICAgICAgICAgdXRpbF8xLmRlZmF1bHQucmFpc2VDdXN0b21FdmVudChlbWJlZC5lbGVtZW50LCBQb3dlckJpLmV2ZW50TWFwW21lc3NhZ2VEYXRhLmV2ZW50XSwgbWVzc2FnZURhdGEpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGNhdGNoIChlKSB7XHJcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmNvbmZpZy5vbkVycm9yID09PSAnZnVuY3Rpb24nKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLm9uRXJyb3IuY2FsbCh3aW5kb3csIGUpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgdGhyb3cgZTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiBMaXN0IG9mIGNvbXBvbmVudHMgdGhpcyBzZXJ2aWNlIGNhbiBlbWJlZC5cclxuXHQgICAgICovXHJcblx0ICAgIFBvd2VyQmkuY29tcG9uZW50cyA9IFtcclxuXHQgICAgICAgIHRpbGVfMS5kZWZhdWx0LFxyXG5cdCAgICAgICAgcmVwb3J0XzEuZGVmYXVsdFxyXG5cdCAgICBdO1xyXG5cdCAgICAvKipcclxuXHQgICAgICogTWFwcGluZyBvZiBldmVudCBuYW1lcyBmcm9tIGlmcmFtZSBwb3N0TWVzc2FnZSB0byB0aGVpciBuYW1lIHBlcmNpZXZlZCBieSBwYXJlbnQgRE9NLlxyXG5cdCAgICAgKiBFeGFtcGxlOiBVc2VyIGNsaWNrcyBvbiBlbWJlZGVkIHJlcG9ydCB3aGljaCBpcyBpbnNpZGUgaWZyYW1lLiBUaGUgaWZyYW1lIGNvZGUgcmVzZW5kc1xyXG5cdCAgICAgKiBldmVudCBhcyBwb3N0TWVzc2FnZSB3aXRoIHsgZXZlbnQ6ICdyZXBvcnRDbGlja2VkJywgLi4uIH0gYW5kIHRoaXMgbmFtZSBpcyBjb252ZXJ0ZWQgdG8gaHlwaGVuYXRlZFxyXG5cdCAgICAgKiBuYW1lIGFuZCBkaXNwYXRjaGVkIGZyb20gdGhlIHBhcmVudCBlbGVtZW50IG9mIHRoZSBpZnJhbWUgdG8gc2ltdWxhdGUgdGhlIGV2ZW50IGJ1YmJsaW5nIHRocm91Z2ggdHdvXHJcblx0ICAgICAqIGRpZmZlcmVudCB3aW5kb3dzIC8gRE9Nc1xyXG5cdCAgICAgKi9cclxuXHQgICAgUG93ZXJCaS5ldmVudE1hcCA9IHtcclxuXHQgICAgICAgICd0aWxlQ2xpY2tlZCc6ICd0aWxlLWNsaWNrJyxcclxuXHQgICAgICAgICd0aWxlTG9hZGVkJzogJ3RpbGUtbG9hZCcsXHJcblx0ICAgICAgICAncmVwb3J0UGFnZUxvYWRlZCc6ICdyZXBvcnQtbG9hZCdcclxuXHQgICAgfTtcclxuXHQgICAgLyoqXHJcblx0ICAgICAqIERlZmF1bHQgY29uZmlndXJhdGlvbiBmb3Igc2VydmljZS5cclxuXHQgICAgICovXHJcblx0ICAgIFBvd2VyQmkuZGVmYXVsdENvbmZpZyA9IHtcclxuXHQgICAgICAgIGF1dG9FbWJlZE9uQ29udGVudExvYWRlZDogZmFsc2UsXHJcblx0ICAgICAgICBvbkVycm9yOiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuXHQgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG5cdCAgICAgICAgICAgICAgICBhcmdzW19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXR1cm4gY29uc29sZS5sb2coYXJnc1swXSwgYXJncy5zbGljZSgxKSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIHJldHVybiBQb3dlckJpO1xyXG5cdH0oKSk7XHJcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5cdGV4cG9ydHMuZGVmYXVsdCA9IFBvd2VyQmk7XHJcblxuXG4vKioqLyB9LFxuLyogMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XHJcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcclxuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuXHR9O1xyXG5cdHZhciBlbWJlZF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcclxuXHR2YXIgUmVwb3J0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuXHQgICAgX19leHRlbmRzKFJlcG9ydCwgX3N1cGVyKTtcclxuXHQgICAgZnVuY3Rpb24gUmVwb3J0KGVsZW1lbnQsIG9wdGlvbnMpIHtcclxuXHQgICAgICAgIC8qKiBGb3JjZSBsb2FkQWN0aW9uIG9uIG9wdGlvbnMgdG8gbWF0Y2ggdGhlIHR5cGUgb2YgY29tcG9uZW50LiBUaGlzIGlzIHJlcXVpcmVkIHRvIGJvb3RzdHJhcCBpZnJhbWUuICovXHJcblx0ICAgICAgICBvcHRpb25zLmxvYWRBY3Rpb24gPSAnbG9hZFJlcG9ydCc7XHJcblx0ICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBlbGVtZW50LCBvcHRpb25zKTtcclxuXHQgICAgfVxyXG5cdCAgICBSZXBvcnQucHJvdG90eXBlLmdldEVtYmVkVXJsID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIGVtYmVkVXJsID0gX3N1cGVyLnByb3RvdHlwZS5nZXRFbWJlZFVybC5jYWxsKHRoaXMpO1xyXG5cdCAgICAgICAgLy8gVE9ETzogTmVlZCBzYWZlIHdheSB0byBhZGQgdXJsIHBhcmFtZXRlcnMuXHJcblx0ICAgICAgICAvLyBXZSBhcmUgYXNzdW1pbmcgZW1iZWRVcmxzIHVzZSBxdWVyeSBwYXJhbWV0ZXJzIHRvIHN1cHBseSBpZCBvZiB2aXN1YWxcclxuXHQgICAgICAgIC8vIHNvIG11c3QgcHJlZml4IHdpdGggJyYnLlxyXG5cdCAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZmlsdGVyUGFuZUVuYWJsZWQpIHtcclxuXHQgICAgICAgICAgICBlbWJlZFVybCArPSBcIiZmaWx0ZXJQYW5lRW5hYmxlZD1mYWxzZVwiO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIGVtYmVkVXJsO1xyXG5cdCAgICB9O1xyXG5cdCAgICBSZXBvcnQudHlwZSA9ICdyZXBvcnQnO1xyXG5cdCAgICByZXR1cm4gUmVwb3J0O1xyXG5cdH0oZW1iZWRfMS5kZWZhdWx0KSk7XHJcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5cdGV4cG9ydHMuZGVmYXVsdCA9IFJlcG9ydDtcclxuXG5cbi8qKiovIH0sXG4vKiAzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcclxuXHR2YXIgdXRpbF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcclxuXHR2YXIgRW1iZWQgPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBFbWJlZChlbGVtZW50LCBvcHRpb25zKSB7XHJcblx0ICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG5cdCAgICAgICAgLy8gVE9ETzogQ2hhbmdlIHdoZW4gT2JqZWN0LmFzc2lnbiBpcyBhdmFpbGFibGUuXHJcblx0ICAgICAgICB0aGlzLm9wdGlvbnMgPSB1dGlsXzEuZGVmYXVsdC5hc3NpZ24oe30sIEVtYmVkLmRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcclxuXHQgICAgICAgIHZhciBlbWJlZFVybCA9IHRoaXMuZ2V0RW1iZWRVcmwoKTtcclxuXHQgICAgICAgIHZhciBpZnJhbWVIdG1sID0gXCI8aWZyYW1lIHN0eWxlPVxcXCJ3aWR0aDoxMDAlO2hlaWdodDoxMDAlO1xcXCIgc3JjPVxcXCJcIiArIGVtYmVkVXJsICsgXCJcXFwiIHNjcm9sbGluZz1cXFwibm9cXFwiIGFsbG93ZnVsbHNjcmVlbj1cXFwidHJ1ZVxcXCI+PC9pZnJhbWU+XCI7XHJcblx0ICAgICAgICB0aGlzLmVsZW1lbnQuaW5uZXJIVE1MID0gaWZyYW1lSHRtbDtcclxuXHQgICAgICAgIHRoaXMuaWZyYW1lID0gdGhpcy5lbGVtZW50LmNoaWxkTm9kZXNbMF07XHJcblx0ICAgICAgICB0aGlzLmlmcmFtZS5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgdGhpcy5sb2FkLmJpbmQodGhpcyksIGZhbHNlKTtcclxuXHQgICAgfVxyXG5cdCAgICAvKipcclxuXHQgICAgICogSGFuZGxlciBmb3Igd2hlbiB0aGUgaWZyYW1lIGhhcyBmaW5pc2hlZCBsb2FkaW5nIHRoZSBwb3dlcmJpIHBsYWNlaG9sZGVyIHBhZ2UuXHJcblx0ICAgICAqIFRoaXMgaXMgdXNlZCB0byBpbmplY3QgY29uZmlndXJhdGlvbiBvcHRpb25zIHN1Y2ggYXMgYWNjZXNzIHRva2VuLCBsb2FkQWN0aW9uLCBldGNcclxuXHQgICAgICogd2hpY2ggYWxsb3cgaWZyYW1lIHRvIGxvYWQgdGhlIGFjdHVhbCByZXBvcnQgd2l0aCBhdXRoZW50aWNhdGlvbi5cclxuXHQgICAgICovXHJcblx0ICAgIEVtYmVkLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIGNvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmVsZW1lbnQpO1xyXG5cdCAgICAgICAgdmFyIGFjY2Vzc1Rva2VuID0gdGhpcy5nZXRBY2Nlc3NUb2tlbigpO1xyXG5cdCAgICAgICAgdmFyIGluaXRFdmVudEFyZ3MgPSB7XHJcblx0ICAgICAgICAgICAgbWVzc2FnZToge1xyXG5cdCAgICAgICAgICAgICAgICBhY3Rpb246IHRoaXMub3B0aW9ucy5sb2FkQWN0aW9uLFxyXG5cdCAgICAgICAgICAgICAgICBhY2Nlc3NUb2tlbjogYWNjZXNzVG9rZW4sXHJcblx0ICAgICAgICAgICAgICAgIHdpZHRoOiBjb21wdXRlZFN0eWxlLndpZHRoLFxyXG5cdCAgICAgICAgICAgICAgICBoZWlnaHQ6IGNvbXB1dGVkU3R5bGUuaGVpZ2h0XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfTtcclxuXHQgICAgICAgIHV0aWxfMS5kZWZhdWx0LnJhaXNlQ3VzdG9tRXZlbnQodGhpcy5lbGVtZW50LCAnZW1iZWQtaW5pdCcsIGluaXRFdmVudEFyZ3MpO1xyXG5cdCAgICAgICAgdGhpcy5pZnJhbWUuY29udGVudFdpbmRvdy5wb3N0TWVzc2FnZShKU09OLnN0cmluZ2lmeShpbml0RXZlbnRBcmdzLm1lc3NhZ2UpLCAnKicpO1xyXG5cdCAgICB9O1xyXG5cdCAgICAvKipcclxuXHQgICAgICogR2V0IGFjY2VzcyB0b2tlbiBmcm9tIGZpcnN0IGF2YWlsYWJsZSBsb2NhdGlvbjogb3B0aW9ucywgYXR0cmlidXRlLCBnbG9iYWwuXHJcblx0ICAgICAqL1xyXG5cdCAgICBFbWJlZC5wcm90b3R5cGUuZ2V0QWNjZXNzVG9rZW4gPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgYWNjZXNzVG9rZW4gPSB0aGlzLm9wdGlvbnMuYWNjZXNzVG9rZW4gfHwgdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgncG93ZXJiaS1hY2Nlc3MtdG9rZW4nKSB8fCB0aGlzLm9wdGlvbnMuZ2V0R2xvYmFsQWNjZXNzVG9rZW4oKTtcclxuXHQgICAgICAgIGlmICghYWNjZXNzVG9rZW4pIHtcclxuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBhY2Nlc3MgdG9rZW4gd2FzIGZvdW5kIGZvciBlbGVtZW50LiBZb3UgbXVzdCBzcGVjaWZ5IGFuIGFjY2VzcyB0b2tlbiBkaXJlY3RseSBvbiB0aGUgZWxlbWVudCB1c2luZyBhdHRyaWJ1dGUgJ3Bvd2VyYmktYWNjZXNzLXRva2VuJyBvciBzcGVjaWZ5IGEgZ2xvYmFsIHRva2VuIGF0OiBwb3dlcmJpLmFjY2Vzc1Rva2VuLlwiKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiBhY2Nlc3NUb2tlbjtcclxuXHQgICAgfTtcclxuXHQgICAgLyoqXHJcblx0ICAgICAqIEdldCBlbWJlZCB1cmwgZnJvbSBmaXJzdCBhdmFpbGFibGUgbG9jYXRpb246IG9wdGlvbnMsIGF0dHJpYnV0ZS5cclxuXHQgICAgICovXHJcblx0ICAgIEVtYmVkLnByb3RvdHlwZS5nZXRFbWJlZFVybCA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBlbWJlZFVybCA9IHRoaXMub3B0aW9ucy5lbWJlZFVybCB8fCB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdwb3dlcmJpLWVtYmVkJyk7XHJcblx0ICAgICAgICBpZiAodHlwZW9mIGVtYmVkVXJsICE9PSAnc3RyaW5nJyB8fCBlbWJlZFVybC5sZW5ndGggPT09IDApIHtcclxuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbWJlZCBVcmwgaXMgcmVxdWlyZWQsIGJ1dCBpdCB3YXMgbm90IGZvdW5kLiBZb3UgbXVzdCBwcm92aWRlIGFuIGVtYmVkIHVybCBlaXRoZXIgYXMgcGFydCBvZiBlbWJlZCBjb25maWd1cmF0aW9uIG9yIGFzIGF0dHJpYnV0ZSAncG93ZXJiaS1lbWJlZCcuXCIpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIGVtYmVkVXJsO1xyXG5cdCAgICB9O1xyXG5cdCAgICAvKipcclxuXHQgICAgICogUmVxdWVzdCB0aGUgYnJvd3NlciB0byBtYWtlIHRoZSBjb21wb25lbnRzIGlmcmFtZSBmdWxsc2NyZWVuLlxyXG5cdCAgICAgKi9cclxuXHQgICAgRW1iZWQucHJvdG90eXBlLmZ1bGxzY3JlZW4gPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgcmVxdWVzdEZ1bGxTY3JlZW4gPSB0aGlzLmlmcmFtZS5yZXF1ZXN0RnVsbHNjcmVlbiB8fCB0aGlzLmlmcmFtZS5tc1JlcXVlc3RGdWxsc2NyZWVuIHx8IHRoaXMuaWZyYW1lLm1velJlcXVlc3RGdWxsU2NyZWVuIHx8IHRoaXMuaWZyYW1lLndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuO1xyXG5cdCAgICAgICAgcmVxdWVzdEZ1bGxTY3JlZW4uY2FsbCh0aGlzLmlmcmFtZSk7XHJcblx0ICAgIH07XHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiBFeGl0IGZ1bGxzY3JlZW4uXHJcblx0ICAgICAqL1xyXG5cdCAgICBFbWJlZC5wcm90b3R5cGUuZXhpdEZ1bGxzY3JlZW4gPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICBpZiAoIXRoaXMuaXNGdWxsc2NyZWVuKHRoaXMuaWZyYW1lKSkge1xyXG5cdCAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHZhciBleGl0RnVsbHNjcmVlbiA9IGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuIHx8IGRvY3VtZW50Lm1vekNhbmNlbEZ1bGxTY3JlZW4gfHwgZG9jdW1lbnQud2Via2l0RXhpdEZ1bGxzY3JlZW4gfHwgZG9jdW1lbnQubXNFeGl0RnVsbHNjcmVlbjtcclxuXHQgICAgICAgIGV4aXRGdWxsc2NyZWVuLmNhbGwoZG9jdW1lbnQpO1xyXG5cdCAgICB9O1xyXG5cdCAgICAvKipcclxuXHQgICAgICogUmV0dXJuIHRydWUgaWYgaWZyYW1lIGlzIGZ1bGxzY3JlZW4sXHJcblx0ICAgICAqIG90aGVyd2lzZSByZXR1cm4gZmFsc2VcclxuXHQgICAgICovXHJcblx0ICAgIEVtYmVkLnByb3RvdHlwZS5pc0Z1bGxzY3JlZW4gPSBmdW5jdGlvbiAoaWZyYW1lKSB7XHJcblx0ICAgICAgICB2YXIgb3B0aW9ucyA9IFsnZnVsbHNjcmVlbkVsZW1lbnQnLCAnd2Via2l0RnVsbHNjcmVlbkVsZW1lbnQnLCAnbW96RnVsbHNjcmVlblNjcmVlbkVsZW1lbnQnLCAnbXNGdWxsc2NyZWVuRWxlbWVudCddO1xyXG5cdCAgICAgICAgcmV0dXJuIG9wdGlvbnMuc29tZShmdW5jdGlvbiAob3B0aW9uKSB7IHJldHVybiBkb2N1bWVudFtvcHRpb25dID09PSBpZnJhbWU7IH0pO1xyXG5cdCAgICB9O1xyXG5cdCAgICAvKipcclxuXHQgICAgICogRGVmYXVsdCBvcHRpb25zIGZvciBlbWJlZGRhYmxlIGNvbXBvbmVudC5cclxuXHQgICAgICovXHJcblx0ICAgIEVtYmVkLmRlZmF1bHRPcHRpb25zID0ge1xyXG5cdCAgICAgICAgZmlsdGVyUGFuZUVuYWJsZWQ6IHRydWUsXHJcblx0ICAgICAgICBvdmVyd3JpdGU6IHRydWVcclxuXHQgICAgfTtcclxuXHQgICAgcmV0dXJuIEVtYmVkO1xyXG5cdH0oKSk7XHJcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5cdGV4cG9ydHMuZGVmYXVsdCA9IEVtYmVkO1xyXG5cblxuLyoqKi8gfSxcbi8qIDQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xyXG5cdHZhciBVdGlscyA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIFV0aWxzKCkge1xyXG5cdCAgICB9XHJcblx0ICAgIFV0aWxzLnJhaXNlQ3VzdG9tRXZlbnQgPSBmdW5jdGlvbiAoZWxlbWVudCwgZXZlbnROYW1lLCBldmVudERhdGEpIHtcclxuXHQgICAgICAgIHZhciBjdXN0b21FdmVudDtcclxuXHQgICAgICAgIGlmICh0eXBlb2Ygd2luZG93LkN1c3RvbUV2ZW50ID09PSAnZnVuY3Rpb24nKSB7XHJcblx0ICAgICAgICAgICAgY3VzdG9tRXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoZXZlbnROYW1lLCB7XHJcblx0ICAgICAgICAgICAgICAgIGRldGFpbDogZXZlbnREYXRhLFxyXG5cdCAgICAgICAgICAgICAgICBidWJibGVzOiB0cnVlLFxyXG5cdCAgICAgICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXHJcblx0ICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICBjdXN0b21FdmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xyXG5cdCAgICAgICAgICAgIGN1c3RvbUV2ZW50LmluaXRDdXN0b21FdmVudChldmVudE5hbWUsIHRydWUsIHRydWUsIGV2ZW50RGF0YSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoY3VzdG9tRXZlbnQpO1xyXG5cdCAgICAgICAgaWYgKGN1c3RvbUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgfHwgIWN1c3RvbUV2ZW50LnJldHVyblZhbHVlKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdmFyIGlubGluZUV2ZW50QXR0ciA9ICdvbicgKyBldmVudE5hbWUucmVwbGFjZSgnLScsICcnKTtcclxuXHQgICAgICAgIHZhciBpbmxpbmVTY3JpcHQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShpbmxpbmVFdmVudEF0dHIpO1xyXG5cdCAgICAgICAgaWYgKGlubGluZVNjcmlwdCkge1xyXG5cdCAgICAgICAgICAgIGV2YWwuY2FsbChlbGVtZW50LCBpbmxpbmVTY3JpcHQpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICBVdGlscy5maW5kSW5kZXggPSBmdW5jdGlvbiAocHJlZGljYXRlLCB4cykge1xyXG5cdCAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHhzKSkge1xyXG5cdCAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBhdHRlbXB0ZWQgdG8gY2FsbCBmaW5kIHdpdGggc2Vjb25kIHRoYXQgd2FzIG5vdCBhbiBhcnJheS4gWW91IHBhc3NlZDogXCIgKyB4cyk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB2YXIgaW5kZXg7XHJcblx0ICAgICAgICB4cy5zb21lKGZ1bmN0aW9uICh4LCBpKSB7XHJcblx0ICAgICAgICAgICAgaWYgKHByZWRpY2F0ZSh4KSkge1xyXG5cdCAgICAgICAgICAgICAgICBpbmRleCA9IGk7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICAgICAgcmV0dXJuIGluZGV4O1xyXG5cdCAgICB9O1xyXG5cdCAgICBVdGlscy5maW5kID0gZnVuY3Rpb24gKHByZWRpY2F0ZSwgeHMpIHtcclxuXHQgICAgICAgIHZhciBpbmRleCA9IFV0aWxzLmZpbmRJbmRleChwcmVkaWNhdGUsIHhzKTtcclxuXHQgICAgICAgIHJldHVybiB4c1tpbmRleF07XHJcblx0ICAgIH07XHJcblx0ICAgIFV0aWxzLnJlbW92ZSA9IGZ1bmN0aW9uIChwcmVkaWNhdGUsIHhzKSB7XHJcblx0ICAgICAgICB2YXIgaW5kZXggPSBVdGlscy5maW5kSW5kZXgocHJlZGljYXRlLCB4cyk7XHJcblx0ICAgICAgICB4cy5zcGxpY2UoaW5kZXgsIDEpO1xyXG5cdCAgICB9O1xyXG5cdCAgICAvLyBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9hc3NpZ25cclxuXHQgICAgLy8gVE9ETzogcmVwbGFjZSBpbiBmYXZvciBvZiB1c2luZyBwb2x5ZmlsbFxyXG5cdCAgICBVdGlscy5hc3NpZ24gPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG5cdCAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuXHQgICAgICAgICAgICBhcmdzW19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdmFyIHRhcmdldCA9IGFyZ3NbMF07XHJcblx0ICAgICAgICAndXNlIHN0cmljdCc7XHJcblx0ICAgICAgICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQgfHwgdGFyZ2V0ID09PSBudWxsKSB7XHJcblx0ICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgdW5kZWZpbmVkIG9yIG51bGwgdG8gb2JqZWN0Jyk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB2YXIgb3V0cHV0ID0gT2JqZWN0KHRhcmdldCk7XHJcblx0ICAgICAgICBmb3IgKHZhciBpbmRleCA9IDE7IGluZGV4IDwgYXJndW1lbnRzLmxlbmd0aDsgaW5kZXgrKykge1xyXG5cdCAgICAgICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaW5kZXhdO1xyXG5cdCAgICAgICAgICAgIGlmIChzb3VyY2UgIT09IHVuZGVmaW5lZCAmJiBzb3VyY2UgIT09IG51bGwpIHtcclxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgbmV4dEtleSBpbiBzb3VyY2UpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2UuaGFzT3duUHJvcGVydHkobmV4dEtleSkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbbmV4dEtleV0gPSBzb3VyY2VbbmV4dEtleV07XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gb3V0cHV0O1xyXG5cdCAgICB9O1xyXG5cdCAgICByZXR1cm4gVXRpbHM7XHJcblx0fSgpKTtcclxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcblx0ZXhwb3J0cy5kZWZhdWx0ID0gVXRpbHM7XHJcblxuXG4vKioqLyB9LFxuLyogNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XHJcblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG5cdCAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcclxuXHQgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcblx0ICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuXHR9O1xyXG5cdHZhciBlbWJlZF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcclxuXHR2YXIgVGlsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcblx0ICAgIF9fZXh0ZW5kcyhUaWxlLCBfc3VwZXIpO1xyXG5cdCAgICBmdW5jdGlvbiBUaWxlKGVsZW1lbnQsIG9wdGlvbnMpIHtcclxuXHQgICAgICAgIC8qKiBGb3JjZSBsb2FkQWN0aW9uIG9uIG9wdGlvbnMgdG8gbWF0Y2ggdGhlIHR5cGUgb2YgY29tcG9uZW50LiBUaGlzIGlzIHJlcXVpcmVkIHRvIGJvb3RzdHJhcCBpZnJhbWUuICovXHJcblx0ICAgICAgICBvcHRpb25zLmxvYWRBY3Rpb24gPSAnbG9hZFRpbGUnO1xyXG5cdCAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZWxlbWVudCwgb3B0aW9ucyk7XHJcblx0ICAgIH1cclxuXHQgICAgVGlsZS5wcm90b3R5cGUuZ2V0RW1iZWRVcmwgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgZW1iZWRVcmwgPSBfc3VwZXIucHJvdG90eXBlLmdldEVtYmVkVXJsLmNhbGwodGhpcyk7XHJcblx0ICAgICAgICByZXR1cm4gZW1iZWRVcmw7XHJcblx0ICAgIH07XHJcblx0ICAgIFRpbGUudHlwZSA9ICd0aWxlJztcclxuXHQgICAgcmV0dXJuIFRpbGU7XHJcblx0fShlbWJlZF8xLmRlZmF1bHQpKTtcclxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcblx0ZXhwb3J0cy5kZWZhdWx0ID0gVGlsZTtcclxuXG5cbi8qKiovIH1cbi8qKioqKiovIF0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG93ZXJiaS5qcy5tYXAiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
